/*
You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.
Notice that you may not slant the container.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1

Constraints:
n == height.length
2 <= n <= 105
0 <= height[i] <= 104
*/


class Solution {
    public int maxArea(int[] height) {
        if(height.length==2){
            if(height[0]>height[1]){return height[1];}
            else{return height[0];}}
               //return min(height[0],height[1]);}
        int n=height.length,x;
        int area=0,max=0,p1=0,p2=n-1;
        while(p1<p2){
            if(height[p1]>height[p2]){x=height[p2];}
            else{x=height[p1];}
            area=(p2-p1)*x;
            if(max<area){
                max=area;
            }
            if(height[p1]>height[p2]){p2--;}
            else{p1++;}
        }
        return max;
      
    }
}
